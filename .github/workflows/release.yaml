name: Release

on:
  push:
    branches:
      - v*-branch
    paths:
      - VERSION

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SEMVER_PATTERN: '^v([0-9]+)\.([0-9]+)\.([0-9]+)(-rc\.([0-9]+))?$'
  IMAGE_REGISTRY: docker.io
  IMAGE_REPOSITORY: kubeflow/training-operator
  PYTHON_VERSION: "3.8"

jobs:
  check-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check whether version matches semver pattern
        run: |
          VERSION=$(cat VERSION)
          if [[ ${VERSION} =~ ${{ env.SEMVER_PATTERN }} ]]; then
            echo "Version '${VERSION}' matches semver pattern."
          else
            echo "Version '${VERSION}' does not match semver pattern."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check whether SDK versions match
        run: |
          VERSION=${VERSION#v}
          SCRIPT_VERSION=$(grep 'VERSION=' hack/python-sdk/gen-sdk.sh | cut -d'=' -f2)
          SWAGGER_VERSION=$(grep 'packageVersion' hack/python-sdk/swagger_config.json | cut -d'"' -f4)
          SETUP_VERSION=$(grep 'version=' sdk/python/setup.py | cut -d'=' -f2 | tr -d "'\"," | xargs)
          
          if [[ ${SCRIPT_VERSION} == ${VERSION} ]]; then
            echo "Script version '${SCRIPT_VERSION}' matches version '${VERSION}'."
          else
            echo "Script version '${SCRIPT_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi
          
          if [[ ${SWAGGER_VERSION} == ${VERSION} ]]; then
            echo "Swagger version '${SWAGGER_VERSION}' matches version '${VERSION}'."
          else
            echo "Swagger version '${SWAGGER_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi
          
          if [[ ${SETUP_VERSION} == ${VERSION} ]]; then
            echo "Setup version '${SETUP_VERSION}' matches version '${VERSION}'."
          else
            echo "Setup version '${SETUP_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi

      - name: Check if tag exists
        run: |
          git fetch --tags
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "Tag '${VERSION}' already exists."
            exit 1
          else
            echo "Tag '${VERSION}' does not exist."
          fi

  release-sdk:
    needs:
      - check-release

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine build

      - name: Generate SDK
        run: make generate

      - name: Build and publish SDK
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          cd sdk/python
          python -m build
          twine upload dist/*

  build_images:
    needs:
      - release-sdk

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  release_images:
    needs:
      - build_images

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ steps.meta.outputs.version }}

  update_manifests:
    needs:
      - release_images

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Update manifests
        run: |
          # Get short commit SHA
          SHA=$(git rev-parse --short HEAD)
          
          # Update image tag in manifests
          for overlay in standalone kubeflow; do
            sed -i "s/newTag:.*/newTag: \"${VERSION}-${SHA}\"/" manifests/overlays/${overlay}/kustomization.yaml
          done
          
          git add manifests/overlays/*/kustomization.yaml
          git commit -m "Update manifests for release ${VERSION}"
          git push origin HEAD:${GITHUB_REF}

  push_tag:
    needs:
      - update_manifests

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git tag -a "${VERSION}" -m "Training Operator Official Release ${VERSION}"
          git push origin "${VERSION}"

  draft_release:
    needs:
      - push_tag

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate changelog
        if: env.GITHUB_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install PyGithub==1.55
          # Get previous version
          PREV_VERSION=$(git tag -l --sort=-version:refname "v*" | head -n 1)
          python docs/release/changelog.py --token=${GITHUB_TOKEN} --range=${PREV_VERSION}..${VERSION}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Training Operator ${{ env.VERSION }}"
          tag_name: ${{ env.VERSION }}
          prerelease: ${{ contains(env.VERSION, 'rc') }}
          target_commitish: ${{ github.sha }}
          draft: true
          body_path: CHANGELOG.md